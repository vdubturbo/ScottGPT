name: Test Suite

on:
  push:
    branches: [ main, initial-setup, phaseI_repairs ]
  pull_request:
    branches: [ main, initial-setup ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run unit tests
      run: npm run test:unit
      env:
        NODE_ENV: test
    
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
    
    - name: Run performance tests
      run: npm run test:performance
      env:
        NODE_ENV: test
    
    - name: Run end-to-end tests
      run: npm run test:e2e
      env:
        NODE_ENV: test
    
    - name: Generate coverage report
      run: npm run test:coverage
      env:
        NODE_ENV: test
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.node-version }}
        path: |
          test-results/
          coverage/
    
    - name: Comment PR with test results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test results if available
          let testSummary = 'Test results will be available after CI completes.';
          
          try {
            const coverageFile = 'coverage/coverage-summary.json';
            if (fs.existsSync(coverageFile)) {
              const coverage = JSON.parse(fs.readFileSync(coverageFile, 'utf8'));
              const lines = coverage.total.lines.pct;
              const branches = coverage.total.branches.pct;
              const functions = coverage.total.functions.pct;
              
              testSummary = `## Test Results ðŸ“Š
              
**Coverage Summary:**
- Lines: ${lines}%
- Branches: ${branches}%  
- Functions: ${functions}%

**Test Suite:** âœ… All tests passing
**Performance:** âœ… Within thresholds
**Linting:** âœ… No issues found

*Full results available in CI artifacts*`;
            }
          } catch (error) {
            console.log('Could not read coverage file:', error.message);
          }
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: testSummary
          });

  performance-monitoring:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run performance monitoring
      run: |
        npm run test:performance 2>&1 | tee performance-log.txt
        
        # Extract performance metrics for trending
        echo "PERFORMANCE_DATA<<EOF" >> $GITHUB_ENV
        grep -E "(time:|duration:|Performance)" performance-log.txt >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
      env:
        NODE_ENV: production
    
    - name: Store performance metrics
      uses: actions/github-script@v6
      with:
        script: |
          const performanceData = process.env.PERFORMANCE_DATA;
          console.log('Performance Metrics:', performanceData);
          
          // Here you could send to monitoring service
          // or store in GitHub Issues for tracking
          
          if (performanceData.includes('FAIL') || performanceData.includes('exceeded')) {
            core.setFailed('Performance thresholds exceeded');
          }